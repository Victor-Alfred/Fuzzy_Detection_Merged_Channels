{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10160\viewh15760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc

\f0\fs24 \cf0 FuzzyColor\
John D'Errico\
woodchips@rochester.rr.com\
9/19/06\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
Fuzzycolor is a tool for identifying the "color name" of any RGB intensity triad, i.e., sets of 3 color values scaled to [0,1] as matlab likes, that denote (red, green, blue) monitor drive values. (Fuzzycolor also accepts uint8 arrays.) I called it "fuzzycolor" because color names are really a fuzzy concept. A color that I see as a red may be construed as pink, or orange, or magenta to you. We all have slightly different color responses through our own visual systems. How you view a color is crucially important, since my monitor is certainly calibrated differently from your monitor. If you print an image, how the printer is set up, calibrated, and characterized are all important. The illuminant you view the print under is crucial. Finally, color has a learned aspect to it too, in that we are taught to recognize colors from an early age. Color is not trivial to characterize.\
\
For example, what  color does [1, 0, 0] represent? Its clearly a red. But can you be sure about [1, 0.1, 0.1]? Is this also a red? How about [1, 0.7, 0.7]? Its easy to test\
which of these is flagged as a red.\
\
>> fuzzycolor([1 0 0],'red')\
ans =\
     1\
\
>> fuzzycolor([1 .1 .1],'red')\
ans =\
     1\
\
>> fuzzycolor([1 .3 .3],'red')\
ans =\
     0.49\
\
>> fuzzycolor([1 .7 .7],'red')\
ans =\
     0\
\
Eventually, as we move along this path, 'red' turns into another color name, call it 'pink'. Exactly where this happens is a matter of opinion. In fact there will be some region where fuzzycolor will return an intermediate value. This is where the name fuzzycolor comes from. This is the problem with color names. They do indeed represent somewhat fuzzy sets in color space.\
\
See what happens with a large set of pixels of random color. The function displaycolorpatches will display them for you.\
\
>> Cp = sortrows(rand(100000,3));\
>> displaycolorpatches(Cp)\
\
Which of those random colors are red?\
\
>> figure\
>> isc = fuzzycolor(Cp,'red');\
>> displaycolorpatches(Cp(isc>0.999,:))\
\
And, which ones are fleshtones?\
\
>> isc = fuzzycolor(Cp,'flesh');\
>> figure\
>> displaycolorpatches(Cp(isc>0.999,:))\
\
Note that some colors may belong to more than one color name set. If you call fuzzycolor with only one argument, it tests each color against all the color names in its database. Any color is believed to have a given color name gets a 1 in the appropriate column. If its close, then fuzzycolor returns a number between 0 and 1.\
\
>> isc = fuzzycolor(Cp);\
>> k = find(sum(isc>0,2)>1);\
>> length(k)\
ans =\
        1041\
\
Here there were 1041 colors which had two or more color names potentially attached to them. Some were flesh tones, which are also dark, muddy reds. Some were both green and yellow, etc.\
\
The current set of color names I've put into my database is 'red, 'green', 'blue', 'neutral', 'pastel', 'yellow', 'flesh', 'cyan', 'magenta' 'black', 'white', 'purple', 'brown'. I'll hope to expand that set with time, and refine my lookup tables to define those sets more accurately. The current table in my database are decent, but clearly have some flaws near the edges. Other users may find that the set of colors they feel should lie in a given color name region is different form what I chose. I can't make everybody happy.\
\
Anyway, have fun. You may choose to refine the lookup tables in FuzzyColorData yourself. I left the function buildfuzzyluts in this directory just in case anybody wants to try it.\
\
}